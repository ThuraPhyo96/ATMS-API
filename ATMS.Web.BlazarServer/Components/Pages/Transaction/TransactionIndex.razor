@page "/transaction"
@inject ApplicationDBContext _dbContext
@rendermode InteractiveServer
@inject NavigationManager NavManager
@attribute [StreamRendering]

<PageTitle>Transaction</PageTitle>

<h1>Transaction</h1>

<NavLink class="nav-link" href="createtransaction">
    <button class="btn btn-primary" aria-hidden="true">New</button>
</NavLink>

@if (transactions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>Type</th>
                <th>Date</th>
                <th>Category</th>
                <th>Amount</th>
                <th>Note</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in transactions)
            {
                <tr>
                    <td>
                        <button class="btn btn-warning" @onclick="() => Edit(item.SpendTransactionId)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => Delete(item.SpendTransactionId)">Delete</button>
                    </td>
                    <td>@TransactionType(item.TransactionType)</td>
                    <td>@item.TransactionDate.ToString("dd-MMM-yyyy HH:mm")</td>
                    <td>@item.Category</td>
                    <td>@item.Amount.ToString("#,##0.00")</td>
                    <td>@item.Note</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private List<SpendTransaction>? transactions;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        transactions = await _dbContext.SpendTransactions
            .AsNoTracking()
            .ToListAsync();
    }

    private string TransactionType(int type)
    {
        return Helper.GetEnumDescriptionByValue<ESpendTransactionTypes>(type)!;
    }

    private void Edit(int id)
    {
        if (id == 0)
            return;

        NavManager.NavigateTo($"/edittransaction/{id}");
    }

    private async Task Delete(int id)
    {
        if (id == 0)
            return;

        var obj = await _dbContext.SpendTransactions.FirstOrDefaultAsync(x => x.SpendTransactionId.Equals(id));
        if (obj is not null)
        {
            _dbContext.SpendTransactions.Remove(obj);
            await _dbContext.SaveChangesAsync();

            transactions = await _dbContext.SpendTransactions
                .AsNoTracking()
                .ToListAsync();

            StateHasChanged();
        }
    }
}